plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
}

android {
    compileSdk 35

    defaultConfig {
        applicationId "net.christianbeier.droidvnc_ng"
        minSdk 24
        targetSdk 34
        versionCode 49
        versionName "2.12.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // CMake build removed - using Rust VNC library instead
        // The Rust library provides all VNC functionality directly through JNI

        ndk {
            debugSymbolLevel = 'FULL'
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // CMake external build removed - Rust provides native library
    namespace 'net.christianbeier.droidvnc_ng'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        buildConfig true
    }
}

// Build libjpeg-turbo for all Android ABIs
tasks.register('buildLibjpegTurbo', Exec) {
    description "Builds libjpeg-turbo library for all Android ABIs"
    group "build"

    def abiMap = [
        "armeabi-v7a": "armv7-linux-androideabi",
        "arm64-v8a"  : "aarch64-linux-android",
        "x86"        : "i686-linux-android",
        "x86_64"     : "x86_64-linux-android"
    ]

    def libjpegTurboPath = "${project.rootDir}/libjpeg-turbo"
    def ndkDir = android.ndkDirectory.absolutePath
    def androidApiLevel = android.defaultConfig.minSdk
    def buildOutputDir = "${project.buildDir}/libjpeg-turbo"

    inputs.dir libjpegTurboPath
    outputs.dir buildOutputDir

    doFirst {
        println "Building libjpeg-turbo for Android NDK: ${ndkDir}"
        println "libjpeg-turbo source: ${libjpegTurboPath}"
        println "Output directory: ${buildOutputDir}"
    }

    def shellCommands = abiMap.collect { abi, targetTriple ->
        def buildDir = "${buildOutputDir}/${abi}/build"
        def installDir = "${buildOutputDir}/${abi}/install"
        def toolchainFile = "${ndkDir}/build/cmake/android.toolchain.cmake"

        // Use Android SDK's CMake if available, otherwise use system cmake
        def cmakeCmd = "cmake"
        def sdkCmake = "${android.sdkDirectory}/cmake"
        def cmakeVersionDirs = new File(sdkCmake).exists() ? new File(sdkCmake).listFiles()?.findAll { it.isDirectory() } : []
        if (cmakeVersionDirs && !cmakeVersionDirs.isEmpty()) {
            // Use the latest CMake version from SDK
            def latestCmake = cmakeVersionDirs.sort { it.name }.last()
            cmakeCmd = "${latestCmake}/bin/cmake"
            println "Using Android SDK CMake: ${cmakeCmd}"
        }

        """
        echo "Building libjpeg-turbo for ABI: ${abi}"

        mkdir -p "${buildDir}"
        mkdir -p "${installDir}"

        cd "${buildDir}"
        ${cmakeCmd} "${libjpegTurboPath}" \\
            -DCMAKE_POLICY_DEFAULT_CMP0057=NEW \\
            -DCMAKE_TOOLCHAIN_FILE="${toolchainFile}" \\
            -DANDROID_ABI="${abi}" \\
            -DANDROID_PLATFORM=android-${androidApiLevel} \\
            -DCMAKE_INSTALL_PREFIX="${installDir}" \\
            -DCMAKE_BUILD_TYPE=Release \\
            -DENABLE_SHARED=OFF \\
            -DENABLE_STATIC=ON \\
            -DWITH_TURBOJPEG=ON \\
            -DWITH_SIMD=ON

        ${cmakeCmd} --build . --config Release --target install -- -j4

        # Verify libraries were built
        if [ ! -f "${installDir}/lib/libturbojpeg.a" ]; then
            echo "ERROR: libturbojpeg.a not found after build"
            exit 1
        fi

        echo "libjpeg-turbo built successfully for ${abi}"
        """.stripIndent()
    }.join('\n')

    commandLine 'bash', '-c', shellCommands
}

tasks.register('buildRust', Exec) {
    description "Builds Rust VNC library for all Android ABIs"
    group "build"

    dependsOn buildLibjpegTurbo

    def abiMap = [
        "armeabi-v7a": "armv7-linux-androideabi",
        "arm64-v8a"  : "aarch64-linux-android",
        "x86"        : "i686-linux-android",
        "x86_64"     : "x86_64-linux-android"
    ]

    def rustProjectPath = "${project.projectDir}/src/main/rust"
    def libjpegTurboOutputDir = "${project.buildDir}/libjpeg-turbo"
    def ndkDir = android.ndkDirectory.absolutePath
    def androidApiLevel = android.defaultConfig.minSdk

    inputs.dir rustProjectPath
    inputs.dir libjpegTurboOutputDir
    outputs.dir "${project.projectDir}/src/main/jniLibs"

    doFirst {
        println "Building Rust VNC library for Android NDK: ${ndkDir}"
        println "Rust project path: ${rustProjectPath}"
        println "libjpeg-turbo output: ${libjpegTurboOutputDir}"
        println "Android API Level for NDK: ${androidApiLevel}"
    }

    def shellCommands = abiMap.collect { abi, targetTriple ->
        def toolchainBinDir = "${ndkDir}/toolchains/llvm/prebuilt/linux-x86_64/bin"
        def libjpegLibDir = "${libjpegTurboOutputDir}/${abi}/install/lib"
        def libjpegIncludeDir = "${libjpegTurboOutputDir}/${abi}/install/include"
        def currentPath = System.getenv('PATH')

        """
        echo "Building for ABI: ${abi} (Target: ${targetTriple})"

        export TOOLCHAIN_BIN_DIR="${toolchainBinDir}"
        export TARGET_CC="${toolchainBinDir}/${targetTriple}${androidApiLevel}-clang"
        export TARGET_CXX="${toolchainBinDir}/${targetTriple}${androidApiLevel}-clang++"
        export TARGET_AR="${toolchainBinDir}/llvm-ar"
        export TARGET_RANLIB="${toolchainBinDir}/llvm-ranlib"
        export PATH="${toolchainBinDir}:${currentPath}"
        export ANDROID_NDK_ROOT="${ndkDir}"
        export NDK_TOOLCHAIN_VERSION="clang"
        export NDK_API_LEVEL="${androidApiLevel}"

        # Set libjpeg-turbo library paths for Rust linker
        export RUSTFLAGS="-L ${libjpegLibDir} -l static=turbojpeg -l static=jpeg"

        rustup target add ${targetTriple} || true

        cd "${rustProjectPath}"
        cargo ndk -t ${abi} -o target/${targetTriple}/release build --target ${targetTriple} --release

        mkdir -p "${project.projectDir}/src/main/jniLibs/${abi}/"
        if [ -f "target/${targetTriple}/release/libdroidvnc_ng.so" ]; then
            cp "target/${targetTriple}/release/libdroidvnc_ng.so" "${project.projectDir}/src/main/jniLibs/${abi}/"
            echo "Copied Rust library to ${project.projectDir}/src/main/jniLibs/${abi}/"
        else
            echo "ERROR: libdroidvnc_ng.so not found after build for ${abi}. Rust compilation likely failed."
            exit 1
        fi
        """.stripIndent()
    }.join('\n')

    commandLine 'bash', '-c', shellCommands
}

// Ensure Rust builds before CMake and assembling APK
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.dependsOn buildRust
    }
    if (task.name.contains('mergeDebugJniLibFolders') || task.name.contains('mergeReleaseJniLibFolders')) {
        task.dependsOn buildRust
    }
    if (task.name.contains('preBuild')) {
        task.dependsOn buildRust
    }
    // Make sure Rust builds before CMake configures
    if (task.name.contains('externalNativeBuild')) {
        task.dependsOn buildRust
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation "androidx.core:core:1.16.0"
    implementation 'com.google.android.material:material:1.12.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.8.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.9.0"
}
repositories {
    mavenCentral()
}